# To-Do List API

Bem-vindo √† **To-Do List API**, uma aplica√ß√£o robusta e modular desenvolvida com **FastAPI** para gerenciar tarefas. Esta API permite criar, listar, atualizar e excluir tarefas de maneira eficiente, com suporte a bancos de dados relacionais como SQLite e PostgreSQL. O projeto segue boas pr√°ticas de desenvolvimento e princ√≠pios de arquitetura limpa, garantindo c√≥digo organizado, reutiliz√°vel e f√°cil de entender.

---

## üìã Funcionalidades

- **Cria√ß√£o de Tarefas**:
  - Permite criar novas tarefas com os seguintes campos:
    - `title`: T√≠tulo da tarefa (obrigat√≥rio e √∫nico).
    - `description`: Descri√ß√£o opcional.
    - `created_at`: Data de cria√ß√£o (preenchido automaticamente, se n√£o fornecido).
    - `status`: Status da tarefa (`pending`, `in progress`, `completed`).

- **Listagem de Tarefas**:
  - Lista todas as tarefas cadastradas.
  - Suporte a pagina√ß√£o e filtro por `status`.

- **Atualiza√ß√£o de Tarefas**:
  - Atualiza os detalhes de uma tarefa espec√≠fica, incluindo:
    - T√≠tulo.
    - Descri√ß√£o.
    - Status.

- **Exclus√£o de Tarefas**:
  - Permite excluir tarefas espec√≠ficas pelo `id`.

---

## üöÄ Tecnologias Utilizadas

- **Framework**: FastAPI
- **Banco de Dados**:
  - SQLite (default) ou PostgreSQL (configur√°vel via `.env`).
- **ORM**: SQLAlchemy
- **Valida√ß√£o e Tipagem**: Pydantic
- **Testes**: Pytest com suporte a `pytest-cov` e dados simulados com Faker.
- **Linter e Formata√ß√£o**: Flake8 e Black.

---

## üõ†Ô∏è Como Executar o Projeto

### 1. Clonando o Reposit√≥rio

```bash
git clone https://github.com/seu-usuario/todolist-api.git
cd todolist-api

### 2. Configura√ß√£o do Ambiente Virtual
 - Crie um ambiente virtual e ative-o:

```bash
python -m venv venv
source venv/bin/activate  # Linux/MacOS
venv\Scripts\activate     # Windows

### 3. Instalando Depend√™ncias
 - Instale as depend√™ncias listadas em requirements.txt:

```bash
pip install -r requirements.txt

### 4. Configura√ß√£o do Banco de Dados
 - *Usando SQLite (Padr√£o)*
  - A configura√ß√£o padr√£o usa SQLite. Nenhuma configura√ß√£o adicional √© necess√°ria.
 - *Usando PostgreSQL*
  - Para usar PostgreSQL, configure o arquivo .env com as vari√°veis de ambiente apropriadas:

```bash
API_VERSION=1.0.0
APP_NAME=todolistApi
DATABASE_DIALECT=postgresql
DATABASE_HOSTNAME=localhost
DATABASE_NAME=todolist
DATABASE_PORT=5432
DATABASE_USERNAME=postgres
DATABASE_PASSWORD=DB_PASS_DEV
DEBUG_MODE=true

### 5. Executando a Aplica√ß√£o
 - Inicie o servidor com Uvicorn por linha comando ou startando a main que j√° est√° configurada

```bash
uvicorn main:app --host 0.0.0.0 --port 8000 --reload

Acesse a API em: http://127.0.0.1:8000
Documenta√ß√£o autom√°tica dispon√≠vel em: http://127.0.0.1:8000/docs

---

## üß™ Testes
## Executando os Testes
 - Rode os testes unit√°rios com *pytest*

```bash
pytest --cov

##Gerando Relat√≥rio de Cobertura
 - Para visualizar a cobertura de testes:

```bash
pytest --cov --cov-report=html

 - Abra o arquivo gerado em htmlcov/index.html no navegador.







